{"version":3,"sources":["components/common/Forms/Fields.jsx","components/Login/Login.module.css","utils/validation.js","components/Login/LoginForm.jsx","components/Login/Login.jsx"],"names":["renderTextField","label","input","meta","touched","invalid","error","custom","placeholder","helperText","renderCheckbox","control","checked","value","onChange","module","exports","max","min","required","undefined","minLength2","length","email","test","reduxForm","form","handleSubmit","pristine","submitting","captchaURL","onSubmit","className","style","buttons","Field","name","component","variant","margin","type","fullWidth","validate","src","alt","captchaImage","Typography","color","Button","size","disabled","connect","auth","isAuthorized","dispatch","logIn","password","rememberMe","captchaText","login","to","container","gutterBottom"],"mappings":"8OAkCaA,EAAkB,SAAC,GAAD,IAC7BC,EAD6B,EAC7BA,MACAC,EAF6B,EAE7BA,MAF6B,IAG7BC,KAAQC,EAHqB,EAGrBA,QAASC,EAHY,EAGZA,QAASC,EAHG,EAGHA,MACvBC,EAJ0B,+CAM7B,kBAAC,IAAD,eACEN,MAAOA,EACPO,YAAaP,EACbK,MAAOF,GAAWC,EAClBI,WAAYL,GAAWE,GACnBJ,EACAK,KAIKG,EAAiB,SAAC,GAAD,IAAGR,EAAH,EAAGA,MAAOD,EAAV,EAAUA,MAAV,OAC5B,6BACE,kBAAC,IAAD,CACEU,QACE,kBAAC,IAAD,CACEC,UAASV,EAAMW,MACfC,SAAUZ,EAAMY,WAGpBb,MAAOA,O,oBC1Dbc,EAAOC,QAAU,CAAC,UAAY,yBAAyB,KAAO,oBAAoB,QAAU,uBAAuB,aAAe,8B,4CCEhHC,EAIAC,E,6DAPLC,EAAW,SAAAN,GAAK,OAC3BA,GAA0B,kBAAVA,OAAqBO,EAAY,YAQtCC,GANKJ,EAEmB,GAEnBC,EAEkB,EAFX,SAAAL,GAAK,OAC5BA,GAASA,EAAMS,OAASJ,EAAxB,kBAAyCA,EAAzC,4BAAoEE,IAGzDG,EAAQ,SAAAV,GAAK,OACxBA,IAAU,4CAA4CW,KAAKX,GACvD,6BACAO,G,iBC6DSK,cAAU,CAAEC,KAAM,SAAlBD,EAnEG,SAAC,GAMZ,IALLnB,EAKI,EALJA,MACAqB,EAII,EAJJA,aACAC,EAGI,EAHJA,SACAC,EAEI,EAFJA,WACAC,EACI,EADJA,WAEA,OACE,0BAAMC,SAAUJ,EAAcK,UAAWC,IAAMP,MAC7C,yBAAKM,UAAWC,IAAMC,SACpB,kBAACC,EAAA,EAAD,CACEC,KAAK,QACLC,UAAWrC,IACXsC,QAAQ,WACRC,OAAO,SACPC,KAAK,OACLvC,MAAM,QACNwC,WAAW,EACXC,SAAU,CAACvB,EAAUI,KAGvB,kBAACY,EAAA,EAAD,CACEC,KAAK,WACLC,UAAWrC,IACXsC,QAAQ,WACRC,OAAO,SACPC,KAAK,WACLvC,MAAM,WACNwC,WAAW,EACXC,SAAU,CAACvB,EAAUE,KAEtBS,GACC,6BACE,yBACEa,IAAKb,EACLc,IAAI,UACJZ,UAAWC,IAAMY,eAEnB,kBAACV,EAAA,EAAD,CACEC,KAAK,cACLC,UAAWrC,IACXuC,OAAO,SACPtC,MAAM,UACNwC,WAAW,MAKnB,kBAACN,EAAA,EAAD,CAAOC,KAAK,aAAaC,UAAW3B,IAAgBT,MAAM,gBACzDK,GACC,kBAACwC,EAAA,EAAD,CAAYC,MAAM,QAAQT,QAAQ,YAC/BhC,GAGL,kBAAC0C,EAAA,EAAD,CACEC,KAAK,QACLX,QAAQ,YACRS,MAAM,UACNP,KAAK,SACLU,SAAUtB,GAAYC,GALxB,c,wBC1BSsB,uBAXS,SAAC,GAAD,QAAGC,KAAH,MAA6C,CACnEC,aADsB,EAAWA,aAEjCvB,WAFsB,EAAyBA,eAKtB,SAAAwB,GAAQ,MAAK,CACtCC,MAAO,SAAChC,EAAOiC,EAAUC,EAAYC,GACnCJ,EAASK,YAAMpC,EAAOiC,EAAUC,EAAYC,QAIjCP,EA5BD,SAAC,GAAyC,IAAvCE,EAAsC,EAAtCA,aAAcE,EAAwB,EAAxBA,MAAOzB,EAAiB,EAAjBA,WACpC,OAAIuB,EAAqB,kBAAC,IAAD,CAAUO,GAAG,aAEpC,yBAAK5B,UAAWC,IAAM4B,WACpB,kBAACf,EAAA,EAAD,CAAYR,QAAQ,KAAKD,UAAU,KAAKyB,cAAY,GAApD,SAGA,kBAAC,EAAD,CACE/B,SAAU,gBAAGR,EAAH,EAAGA,MAAOiC,EAAV,EAAUA,SAAUC,EAApB,EAAoBA,WAAYC,EAAhC,EAAgCA,YAAhC,OACRH,EAAMhC,EAAOiC,EAAUC,EAAYC,IAErC5B,WAAYA","file":"static/js/7.a8e44107.chunk.js","sourcesContent":["import React from \"react\";\n// import style from '../../Login/Login.module.css'\nimport TextField from \"@material-ui/core/TextField\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\n\nexport const Input = ({\n  input,\n  label,\n  meta: { touched, error, warning },\n  ...props\n}) => (\n  <div>\n    {label && <label>{label}</label>}\n    <input {...input} {...props} />\n    {touched &&\n      ((error && <span>{error}</span>) || (warning && <span>{warning}</span>))}\n  </div>\n);\n\nexport const TextArea = ({\n  input,\n  label,\n  meta: { touched, error, warning },\n  ...props\n}) => (\n  <div>\n    {label && <label>{label}</label>}\n    <textarea {...input} {...props} />\n    {touched &&\n      ((error && <span>{error}</span>) || (warning && <span>{warning}</span>))}\n  </div>\n);\n\nexport const renderTextField = ({\n  label,\n  input,\n  meta: { touched, invalid, error },\n  ...custom\n}) => (\n  <TextField\n    label={label}\n    placeholder={label}\n    error={touched && invalid}\n    helperText={touched && error}\n    {...input}\n    {...custom}\n  />\n);\n\nexport const renderCheckbox = ({ input, label }) => (\n  <div>\n    <FormControlLabel\n      control={\n        <Checkbox\n          checked={input.value ? true : false}\n          onChange={input.onChange}\n        />\n      }\n      label={label}\n    />\n  </div>\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Login_container__1Oz4Y\",\"form\":\"Login_form__2mvFD\",\"buttons\":\"Login_buttons__3a3px\",\"captchaImage\":\"Login_captchaImage__mkBQu\"};","export const required = value =>\n  value || typeof value === \"number\" ? undefined : \"Required\";\n\nconst maxLength = max => value =>\n  value && value.length > max ? `Must be ${max} characters or less` : undefined;\nexport const maxLength15 = maxLength(15);\n\nconst minLength = min => value =>\n  value && value.length < min ? `Must be ${min} characters or more` : undefined;\nexport const minLength2 = minLength(2);\n\nexport const email = value =>\n  value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)\n    ? \"Invalid email address\"\n    : undefined;\n","import React from \"react\";\nimport style from \"./Login.module.css\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { renderTextField, renderCheckbox } from \"../common/Forms/Fields\";\nimport { required, email, minLength2 } from \"../../utils/validation\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst LoginForm = ({\n  error,\n  handleSubmit,\n  pristine,\n  submitting,\n  captchaURL\n}) => {\n  return (\n    <form onSubmit={handleSubmit} className={style.form}>\n      <div className={style.buttons}>\n        <Field\n          name=\"email\"\n          component={renderTextField}\n          variant=\"outlined\"\n          margin=\"normal\"\n          type=\"text\"\n          label=\"Email\"\n          fullWidth={true}\n          validate={[required, email]}\n        />\n\n        <Field\n          name=\"password\"\n          component={renderTextField}\n          variant=\"outlined\"\n          margin=\"normal\"\n          type=\"password\"\n          label=\"Password\"\n          fullWidth={true}\n          validate={[required, minLength2]}\n        />\n        {captchaURL && (\n          <div>\n            <img\n              src={captchaURL}\n              alt=\"captcha\"\n              className={style.captchaImage}\n            />\n            <Field\n              name=\"captchaText\"\n              component={renderTextField}\n              margin=\"normal\"\n              label=\"captcha\"\n              fullWidth={true}\n            />\n          </div>\n        )}\n      </div>\n      <Field name=\"rememberMe\" component={renderCheckbox} label=\"Remember me\" />\n      {error && (\n        <Typography color=\"error\" variant=\"overline\">\n          {error}\n        </Typography>\n      )}\n      <Button\n        size=\"large\"\n        variant=\"contained\"\n        color=\"primary\"\n        type=\"submit\"\n        disabled={pristine || submitting}\n      >\n        Submit\n      </Button>\n    </form>\n  );\n};\n\nexport default reduxForm({ form: \"login\" })(LoginForm);\n","import React from \"react\";\nimport style from \"./Login.module.css\";\nimport LoginForm from \"./LoginForm\";\nimport { connect } from \"react-redux\";\nimport { login } from \"../../redux/authReducer\";\nimport { Redirect } from \"react-router-dom\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst Login = ({ isAuthorized, logIn, captchaURL }) => {\n  if (isAuthorized) return <Redirect to=\"/profile\" />;\n  return (\n    <div className={style.container}>\n      <Typography variant=\"h2\" component=\"h1\" gutterBottom>\n        Login\n      </Typography>\n      <LoginForm\n        onSubmit={({ email, password, rememberMe, captchaText }) =>\n          logIn(email, password, rememberMe, captchaText)\n        }\n        captchaURL={captchaURL}\n      />\n    </div>\n  );\n};\n\nconst mapStateToProps = ({ auth: { isAuthorized, captchaURL } }) => ({\n  isAuthorized,\n  captchaURL\n});\n\nconst mapDispatchToProps = dispatch => ({\n  logIn: (email, password, rememberMe, captchaText) => {\n    dispatch(login(email, password, rememberMe, captchaText));\n  }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n"],"sourceRoot":""}